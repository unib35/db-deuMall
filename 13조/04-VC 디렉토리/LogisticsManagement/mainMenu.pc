// 최초작성자: 20183215 정현수 [2022.12.01]
#define _CRT_SECURE_NO_WARNINGS
#define PAGE_NUM 5
//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

extern void login();
extern void addStorage();
extern void select_BranchAccount();
extern void searchStorageStock();
extern void select_SearchProduct();
extern void addBranchAccount();
extern void deleteBranchAccount();
extern void Branch();
extern void manageIn();
extern void manageOut();

// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y);
void getxy(int* x, int* y);
void clrscr(void);
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void DB_connect();
void select_HeadMain();
void select_BranchMain();
void select_ProductMain();
void select_HeadAccountMain();
void sql_error();

EXEC SQL BEGIN DECLARE SECTION;
VARCHAR uid[80];
VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()
 
void main()
{
	_putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용

	DB_connect();
	login();
	//select_HeadMain();
	EXEC SQL COMMIT WORK RELEASE;
	getch();
}
void DB_connect()
{
	strcpy((char*)uid.arr, "b20183109@//sedb.deu.ac.kr:1521/orcl");
	uid.len = (short)strlen((char*)uid.arr);
	strcpy((char*)pwd.arr, "20183109");
	pwd.len = (short)strlen((char*)pwd.arr);

	EXEC SQL CONNECT : uid IDENTIFIED BY : pwd;

	// connection이 실패했을경우의 처리부분

	if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405) {
		printf("Connect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
	}
}

void select_HeadMain() {
	// 본사 메인 화면
	clrscr();
	gotoxy(0, 1);
	print_screen("headMainMenu.txt");
	int cursor_position = 10; // 현재 커서 위치
	int input_status; // 입력 상태
	while (1) {
		gotoxy(42, cursor_position);
		input_status = _getch();
		if (input_status == 72 || input_status == 80) { //윗방향 또는 아래방향을 입력받았을 경우

			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 10) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 18;
				}
				else {
					cursor_position -= 2;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 18) { // 커서가 마지막 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 10;
				}
				else {
					cursor_position += 2;
				}
			}
		}
		else if (input_status == 13) { // 엔터키를 입력받았을 경우
			clrscr();
			if (cursor_position == 10) { //첫번째 행
				select_ProductMain();
			}
			else if (cursor_position == 12) {//두번째 행
				manageOut();
			}
			else if (cursor_position == 14) {//세번째 행
				manageIn();
			}
			else if (cursor_position == 16) {//네번째 행
				select_HeadAccountMain();
			}
			else if (cursor_position == 18) {//다섯번째 행
				login();
			}
			break;
		}
	}
}

void select_BranchMain() {
	// 지사 메인 화면
	clrscr();
	gotoxy(0, 1);
	print_screen("branchMainMenu.txt");
	int cursor_position = 10; // 현재 커서 위치
	int input_status; // 입력 상태
	while (1) {
		gotoxy(42, cursor_position);
		input_status = _getch();
		if (input_status == 72 || input_status == 80) { //윗방향 또는 아래방향을 입력받았을 경우

			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 10) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 16;
				}
				else {
					cursor_position -= 2;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 16) { // 커서가 마지막 행에 있고, 아래방향키를 입력받았을 경우 첫 행으로 감
					cursor_position = 10;
				}
				else {
					cursor_position += 2;
				}
			}
		}
		else if (input_status == 13) { // 엔터키를 입력받았을 경우
			clrscr();
			if (cursor_position == 10) { //첫번째 행
				select_SearchProduct();
			}
			else if (cursor_position == 12) {//두번째 행
				Branch();
			}
			else if (cursor_position == 14) {//세번째 행
				select_BranchAccount();
			}
			else if (cursor_position == 16) {//네번째 행
				login();
			}
			break;
		}
	}
}

void select_ProductMain() {
	// 물품 관리 메인
	clrscr();
	gotoxy(0, 1);
	print_screen("productMenu.txt");
	int cursor_position = 10; // 현재 커서 위치
	int input_status; // 입력 상태
	while (1) {
		gotoxy(42, cursor_position);
		input_status = _getch();
		if (input_status == 72 || input_status == 80) { //윗방향 또는 아래방향을 입력받았을 경우

			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 10) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 14;
				}
				else {
					cursor_position -= 2;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 14) { // 커서가 마지막 행에 있고, 아래방향키를 입력받았을 경우 첫 행으로 감
					cursor_position = 10;
				}
				else {
					cursor_position += 2;
				}
			}
		}
		else if (input_status == 13) { // 엔터키를 입력받았을 경우
			clrscr();
			if (cursor_position == 10) { //첫번째 행
				searchStorageStock();
			}
			else if (cursor_position == 12) {//두번째 행
				addStorage();
			}
			else if (cursor_position == 14) {//세번째 행
				select_HeadMain();
			}
			break;
		}
	}
}

void select_HeadAccountMain() {
	// 본사 계정관리 메뉴
	clrscr();
	gotoxy(0, 1);
	print_screen("HeadAccountMenu.txt");
	int cursor_position = 10; // 현재 커서 위치
	int input_status; // 입력 상태
	while (1) {
		gotoxy(42, cursor_position);
		input_status = _getch();
		if (input_status == 72 || input_status == 80) { //윗방향 또는 아래방향을 입력받았을 경우

			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 10) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 14;
				}
				else {
					cursor_position -= 2;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 14) { // 커서가 마지막 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 10;
				}
				else {
					cursor_position += 2;
				}
			}
		}
		else if (input_status == 13) { // 엔터키를 입력받았을 경우
			clrscr();
			if (cursor_position == 10) { //첫번째 행
				addBranchAccount();
			}
			else if (cursor_position == 12) {//두번째 행
				deleteBranchAccount();
			}
			else if (cursor_position == 14) {//세번째 행
				select_HeadMain();
			}
			break;
		}
	}
}

void print_screen(char fname[])
{
	FILE* fp;
	char line[100];

	if ((fp = fopen(fname, "r")) == NULL) {
		printf("file open error\n");
		getch();
		exit(-1);
	}
	while (1)
	{
		if (fgets(line, 99, fp) == NULL) {
			break;
		}
		printf("%s", line);
	}

	fclose(fp);
}

/* --------------------------------------------------------------------------
int sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char* msg)
{
	char err_msg[128];
	size_t buf_len, msg_len;

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\n%s\n", msg);
	buf_len = sizeof(err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);
	printf("%.*s\n", msg_len, err_msg);

	getch();
	EXEC SQL ROLLBACK WORK;
	//exit(EXIT_FAILURE);
}
/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

void gotoxy(int x, int y)
{
	COORD Cur = { (SHORT)x, (SHORT)y };

	SetConsoleCursorPosition(STD_HANDLE, Cur);
}

void getxy(int* x, int* y)
{
	CONSOLE_SCREEN_BUFFER_INFO Buf;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
	*x = (int)Buf.dwCursorPosition.X;
	*y = (int)Buf.dwCursorPosition.Y;

}

void clrscr(void)
{
	COORD Cur = { 0, 0 };
	unsigned long dwLen;

	FillConsoleOutputCharacter(STD_HANDLE, ' ', 100 * 40, Cur, &dwLen);
}

/*---------------------------------------------------------*/
