// 최초 작성자 : 20183207 김성찬
/*-----------------------------------------------

-------------------------------------------------*/
#define _CRT_SECURE_NO_WARNINGS

//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
#include <stdbool.h>
/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

//#ifdef WIN32
#include < windows.h >
/*---------------  화면 커서 위치 제어 ----------------------*/
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
void clrscr(void) ;
/*-----------------------------------------------------------*/
#define getch() _getch()

int max=1;
void getmax();
void Branch();
void branchrequest();
void paintui();
void get_item();
void paintui_errorpid();
void paintui_erroramount();
void paintui_errortype();
char pid[15] ="";
char amount[15] ="";
char type[15] = "";
char tmp[25]="";
void DB_connect();
void rtrim();

extern void select_BranchMain();
extern char global_officenumber[100];
int count = 1;
int colcount=0;
void sql_error();

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;


void Branch()
{
	_putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용
    strcpy(pid,tmp);
    strcpy(amount,tmp);
    strcpy(type,tmp);
    DB_connect();
    branchrequest();
    EXEC SQL COMMIT WORK RELEASE; 
    getch();
}

void branchrequest()
{
gotoxy(0, 1);
EXEC SQL BEGIN DECLARE SECTION;
    varchar pamount[13];
    char dynstmt[1000];

EXEC SQL END DECLARE SECTION;

    char ordernumber[100];   

   /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

   clrscr();

   /* 데이터 입력 */

    FILE* fs;
    fs = fopen("Branchrequest.txt", "r");
    while (feof(fs) == 0) {
        char str[1000];
        fgets(str, 1000, fs);
        printf("%s", str);
    }
    get_item();


   /* 제품번호 입력 */
    do{
        gotoxy(53, 10);
        gets(pid);
        sprintf(dynstmt, "SELECT pamount  FROM storage where pid =  '%s'", pid);
        EXEC SQL PREPARE S FROM : dynstmt;
        /* cursor 선언 */
        EXEC SQL DECLARE c_cursor CURSOR FOR S;

        /* cursor open */
        EXEC SQL OPEN c_cursor;

        for (;;)
        {
            EXEC SQL FETCH c_cursor INTO : pamount;
	if (sqlca.sqlcode == 1403) break;
            pamount.arr[pamount.len] = '\0';
        }
        colcount= sqlca.sqlerrd[2];
        if(sqlca.sqlerrd[2] == 0){
	paintui_errorpid();
	}
            /* Close the cursor. */
            EXEC SQL CLOSE c_cursor;
            }while (colcount== 0);
	if(count!=1) paintui();
	


   /* 수량 입력 */
    
    bool isamount = false;
    do {
        isamount = false;
        gotoxy(53, 12);
        gets(amount);
        for (int i = 0; amount[i] != '\0'; i++) //문자열 끝까지
        {
            if (!isdigit(amount[i])) { //숫자가 아니면
                paintui_erroramount();
                isamount = true;
            }

        }
    } while (isamount);
    paintui();
    
    bool istype = false;
   /* 타입 입력 */
    
    
    do {
        gotoxy(53, 14);
        gets(type);
        istype = false;
        if (strcmp("입고", type) != 0 && strcmp("출고", type) != 0)
        {
            paintui_errortype();
            istype = true;
        }
    } while (istype);
    paintui();
    getmax();
    gotoxy(51, 16);
    sprintf(dynstmt,"insert into warehousing values ( '%d', '%s','%s', '%s','%s',to_char(sysdate))" , max,type,global_officenumber, pid, amount);
    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;
    EXEC SQL COMMIT WORK ;
    gotoxy(38, 17);
    printf("입/출고를 신청합니다.");
    Sleep(1500);
    select_BranchMain();
}

/* --------------------------------------------------------------------------
void sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void getmax(){
    EXEC SQL BEGIN DECLARE SECTION;
    varchar ordernumber[13];
    char dynstmt[1000];

    EXEC SQL END DECLARE SECTION;
    sprintf(dynstmt, "SELECT  max(CAST (ordernumber AS int)) FROM warehousing");
        EXEC SQL PREPARE S FROM : dynstmt;
        /* cursor 선언 */
        EXEC SQL DECLARE order_cursor CURSOR FOR S;

        /* cursor open */
        EXEC SQL OPEN order_cursor;

        for (;;)
        {
            EXEC SQL WHENEVER NOT FOUND DO break;
            EXEC SQL FETCH order_cursor INTO : ordernumber;
            ordernumber.arr[ordernumber.len] = '\0';
        }
        if(sqlca.sqlerrd[2] == 0){
	        max=1;
    	}
	
        else max = atoi(ordernumber.arr)+1;
            /* Close the cursor. */
            EXEC SQL CLOSE order_cursor;
}
void paintui() { //53 10 12 14
    clrscr();
    gotoxy(0, 1);
    FILE* fs;
    count = 1;
    fs = fopen("Branchrequest.txt", "r");
    while (feof(fs) == 0) {
        char str[1000];
        fgets(str, 1000, fs);
        printf("%s", str);
        if (count == 10) {
            gotoxy(53, 10);
            printf("%s", pid);
        }
        if (count == 12) {
            gotoxy(53, 12);
            printf("%s", amount);
        }
        if (count == 14) {
            gotoxy(53, 14);
            printf("%s", type);
        }
        count++;
    }
    get_item();
}
void paintui_errorpid() { //53 10 12 14
    clrscr();
    strcpy(pid," ");
    gotoxy(0, 1);
    FILE* fs;
    count = 1;
    fs = fopen("Branchrequest.txt", "r");
    while (feof(fs) == 0) {
        char str[1000];
        fgets(str, 1000, fs);
        printf("%s", str);
        if (count == 10) {
            gotoxy(53, 10);
            printf("%s", pid);            
        }
        if (count == 11) {
            gotoxy(23, 11);
            printf("확인할 수 없는 재품번호 입니다. 다시 입력해 주세요\n");
        }
        count++;
    }
    get_item();   

}
void paintui_erroramount() { //53 10 12 14
    clrscr();
    strcpy(amount, " ");
    gotoxy(0, 1);
    FILE* fs;
    count = 1;
    fs = fopen("Branchrequest.txt", "r");
    while (feof(fs) == 0) {
        char str[1000];
        fgets(str, 1000, fs);
        printf("%s", str);
        if (count == 10) {
            gotoxy(53, 10);
            printf("%s", pid);
        }
        if (count == 12) {
            gotoxy(53, 12);
            printf("%s", amount);
        }
        if (count == 13) {
            gotoxy(36, 13);
            printf("숫자만 입력해 주세요.\n");
        }
        count++;
    }
    get_item();
}
void paintui_errortype() { //53 10 12 14
    clrscr();
    strcpy(type, " ");
    gotoxy(0, 1);
    FILE* fs;
    count = 1;
    fs = fopen("Branchrequest.txt", "r");
    while (feof(fs) == 0) {
        char str[1000];
        fgets(str, 1000, fs);
        printf("%s", str);
        if (count == 10) {
            gotoxy(53, 10);
            printf("%s", pid);
        }
        if (count == 12) {
            gotoxy(53, 12);
            printf("%s", amount);
        }
        if (count == 14) {
            gotoxy(53, 14);
            printf("%s", type);
        }
        if (count == 15) {
            gotoxy(33, 15);
            printf("타입을 다시 입력해 주세요.\n");
        }
        count++;
    }
    get_item();

}

void get_item()
{
	EXEC SQL BEGIN DECLARE SECTION;
	varchar id[100];
	varchar name[100];
	varchar amount[100];
	varchar price[100];

	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	/* 실행시킬 SQL 문장*/
	sprintf(dynstmt, "SELECT b.pid, p.pname, b.pamount, p.pprice FROM storage b join productinfo p on b.pid = p.pid");

	EXEC SQL PREPARE S FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE p_cursor CURSOR FOR S;

	/* cursor open */
	EXEC SQL OPEN p_cursor;
	gotoxy(20, 20);
	printf(" 상품코드  |이름           |수량      |개당 가격    ");
	gotoxy(20, 21);
	printf("----------------------------------------------");
	int y = 22;

	for (;;)
	{

		EXEC SQL FETCH p_cursor INTO : id, : name, : amount, : price;
		if (sqlca.sqlcode == 1403) break;
		id.arr[id.len] = '\0';
		name.arr[name.len] = '\0';
		amount.arr[amount.len] = '\0';
		price.arr[price.len] = '\0';
		gotoxy(20, y);
		printf(" %-10s|%-15s|%-10s|%-10s", id.arr, name.arr, amount.arr, price.arr);
		y++;


	}

	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor;
}