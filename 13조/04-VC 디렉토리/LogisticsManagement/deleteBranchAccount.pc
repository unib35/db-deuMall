//최초작성자: 20183215 정현수 [2022.12.04]
#define _CRT_SECURE_NO_WARNINGS
#define PAGE_NUM 5

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


//win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
/*-----------------------------------------*/


/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y);
void getxy(int* x, int* y);
void clrscr(void);
/*-----------------------------------------------------------*/
void deleteBranchAccount();
void get_BranchList();
void input_officeValue();
void check_officenum();
void deleteAccount();

char input_officenumber[100];

extern void select_ProductMain();
extern void select_HeadAccountMain();

EXEC SQL BEGIN DECLARE SECTION;
VARCHAR uid[80];
VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()

void deleteBranchAccount()
{
	_putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용
	DB_connect();
	get_BranchList();
	input_officeValue();
	check_officenum();
	EXEC SQL COMMIT WORK RELEASE;
	getch();
}


void get_BranchList()
{
	clrscr();
	gotoxy(0, 1);
	print_screen("deleteBranchAccount.txt");

	EXEC SQL BEGIN DECLARE SECTION;
	varchar officenumber[100];
	varchar id[100];
	varchar pw[100];

	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	/* 실행시킬 SQL 문장*/
	sprintf(dynstmt, "SELECT officenumber, id, pw FROM account ORDER BY officenumber ASC");

	EXEC SQL PREPARE S FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor CURSOR FOR S;

	/* cursor open */
	EXEC SQL OPEN c_cursor;
	gotoxy(35, 13);
	printf(" 지점번호  |아이디    |비밀번호    ");
	gotoxy(35, 14);
	printf("-------------------------------------");
	int y = 15;

	for (;;)
	{
		EXEC SQL FETCH c_cursor INTO : officenumber, : id, : pw;
		if (sqlca.sqlcode == 1403) break;

		officenumber.arr[officenumber.len] = '\0';
		id.arr[id.len] = '\0';
		pw.arr[pw.len] = '\0';

		gotoxy(35, y);
		printf(" %-10s|%-10s|%-10s", officenumber.arr, id.arr, pw.arr);
		y++;
	}

	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor;
}

void input_officeValue()
{
	int input_status;

	/* 사용자 입력 */
	gotoxy(49, 7);
	gets(input_officenumber); // 지점번호 입력

	int cursor_position = 10;

	if (strlen(input_officenumber) <= 0) {
		gotoxy(38, 8);
		printf("입력하지 않은 항목이 있습니다 다시 시도해주세요.\n");
		Sleep(1000);
		deleteBranchAccount();
	}
	else if(strcmp(input_officenumber,"100")==0){
		gotoxy(38, 8);
		printf("본사 계정은 삭제할 수 없습니다.\n");
		Sleep(1000);
		deleteBranchAccount();
	}
	else {
		while (1) {
			gotoxy(47, cursor_position);
			input_status = _getch();
			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 10) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 11;
				}
				else {
					cursor_position -= 1;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 11) { // 커서가 마지막 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 10;
				}
				else {
					cursor_position += 1;
				}
			}
			else if (input_status == 13) { // 엔터키를 입력받았을 경우
				if (cursor_position == 11) {//두번째 행
					gotoxy(38, 8);
					printf("취소되었습니다. 이전 화면으로 이동합니다.");
					Sleep(1500);
					select_HeadAccountMain();
				}
				break;
			}
		}
	}

}

void check_officenum()
{
	EXEC SQL BEGIN DECLARE SECTION;
	varchar check_officenumber[100];

	char dynstmt1[1000];
	EXEC SQL END DECLARE SECTION;

	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	sprintf(dynstmt1, "SELECT officenumber FROM account where officenumber = '%s' ", input_officenumber);

	EXEC SQL PREPARE S FROM : dynstmt1;

	EXEC SQL DECLARE c_cursor6 CURSOR FOR S;

	EXEC SQL OPEN c_cursor6;

	for (;;)
	{
		EXEC SQL FETCH c_cursor6 INTO : check_officenumber;
		if (sqlca.sqlcode == 1403) break;
		check_officenumber.arr[check_officenumber.len] = '\0';

		if (check_officenumber.arr != NULL) {
			deleteAccount();
		}

		break;
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor6;

	gotoxy(38, 8);
	printf("존재하지 않는 지점번호입니다.");
	Sleep(1500);
	deleteBranchAccount();
}

void deleteAccount()
{
	EXEC SQL BEGIN DECLARE SECTION;

	char dynstmt[1000];

	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	sprintf(dynstmt, "delete from account where officenumber = '%s' ", input_officenumber);
	EXEC SQL EXECUTE IMMEDIATE : dynstmt;

	EXEC SQL COMMIT WORK;

	gotoxy(38, 8);
	printf("해당 지점 계정이 삭제되었습니다.");
	Sleep(1500);
	deleteBranchAccount();
}