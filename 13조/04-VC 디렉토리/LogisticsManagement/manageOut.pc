//최초작성자: 20183199 김기정 [2022.12.07]
#define _CRT_SECURE_NO_WARNINGS
#define PAGE_NUM 5

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


//win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
/*-----------------------------------------*/
void manageOut();
void get_OutTuple();
void receive_number();
void check_ordernu();
void no_receiv();
void checking_pi();
void insert_pid();
void update_storag();
void update_branchStorag();
void select_nBranchStoragePamoun();
void select_nStoragePamoun();
/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y);
void getxy(int* x, int* y);
void clrscr(void);
/*-----------------------------------------------------------*/
char order_nu[100];
char order_pi[100];
char order_officenumbe[100];
char order_amoun[100];
char now_storagePamoun[100];
char now_branchStoragePamoun[100];
void sql_error();

extern void select_HeadMain();

EXEC SQL BEGIN DECLARE SECTION;
VARCHAR uid[80];
VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()

void manageOut()
{
	_putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용
	DB_connect();
	get_OutTuple();
	receive_number();

	EXEC SQL COMMIT WORK RELEASE;
	getch();
}

void get_OutTuple()
{
	clrscr();
	gotoxy(0, 1);
	print_screen("managewarehousing.txt");

	EXEC SQL BEGIN DECLARE SECTION;
	varchar ordernumber[100];
	varchar type[100];
	varchar officenumber[100];
	varchar pid[100];
	varchar orderamount[100];
	varchar pdate[100];

	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;


	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	/* 실행시킬 SQL 문장*/
	sprintf(dynstmt, "SELECT ordernumber, type, officenumber, pid, orderamount, pdate FROM warehousing WHERE type = '입고' ORDER BY CAST(ordernumber AS int) ASC");

	EXEC SQL PREPARE S FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor CURSOR FOR S;

	/* cursor open */
	EXEC SQL OPEN c_cursor;
	gotoxy(20, 15);
	printf("주문번호   |유형      |지점번호  |상품번호  |주문량    |날짜    ");
	gotoxy(20, 16);
	printf("------------------------------------------------------------------");
	int y = 17;

	for (;;)
	{

		EXEC SQL FETCH c_cursor INTO : ordernumber, : type, : officenumber, : pid, : orderamount, : pdate;
		if (sqlca.sqlcode == 1403) break;

		ordernumber.arr[ordernumber.len] = '\0';
		type.arr[type.len] = '\0';
		officenumber.arr[officenumber.len] = '\0';
		pid.arr[pid.len] = '\0';
		orderamount.arr[orderamount.len] = '\0';
		pdate.arr[pdate.len] = '\0';

		gotoxy(20, y);
		printf(" %-10s|%-10s|%-10s|%-10s|%-10s|%-10s", ordernumber.arr, type.arr, officenumber.arr, pid.arr, orderamount.arr, pdate.arr);
		y++;
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor;
}

void receive_number() {
	int input_status;

	gotoxy(48, 7);
	gets(order_nu);// 전역변수에 저장

	int cursor_position = 9;

	if (strlen(order_nu) <= 0) {
		gotoxy(38, 8);
		printf("입력하지 않은 항목이 있습니다 다시 시도해주세요,\n");
		Sleep(1000);
		manageOut();
	}
	else {
		while (1) {
			gotoxy(45, cursor_position);
			input_status = _getch();
			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 9) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 11;
				}
				else {
					cursor_position -= 1;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 11) { // 커서가 마지막 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 9;
				}
				else {
					cursor_position += 1;
				}
			}
			else if (input_status == 13) { // 엔터키를 입력받았을 경우
				if (cursor_position == 9) {//첫번째 행
					check_ordernu();
					checking_pi();
					select_nBranchStoragePamoun();
					select_nStoragePamoun();
					update_storag();
					update_branchStorag();
					no_receiv();
				}
				else if (cursor_position == 10) {//두번째 행
					check_ordernu();
					no_receiv();
				}
				else{
					select_HeadMain();
				}
				break;
			}
		}
	}
}

void check_ordernu()
{
	EXEC SQL BEGIN DECLARE SECTION;
	varchar check_ordernu[100];
	varchar check_officenumbe[100];
	varchar check_pi[100];
	varchar check_orderamoun[100];
	char dynstmt1[1000];
	EXEC SQL END DECLARE SECTION;

	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	sprintf(dynstmt1, "SELECT ordernumber, officenumber, pid, orderamount FROM warehousing where ordernumber = '%s' and type ='입고'", order_nu);

	EXEC SQL PREPARE S FROM : dynstmt1;

	EXEC SQL DECLARE c_cursor6 CURSOR FOR S;

	EXEC SQL OPEN c_cursor6;

	for (;;)
	{
		EXEC SQL FETCH c_cursor6 INTO : check_ordernu, : check_officenumbe, : check_pi, : check_orderamoun;
		if (sqlca.sqlcode == 1403) break;

		check_ordernu.arr[check_ordernu.len] = '\0';
		check_officenumbe.arr[check_officenumbe.len] = '\0';
		check_pi.arr[check_pi.len] = '\0';
		check_orderamoun.arr[check_orderamoun.len] = '\0';

		if (check_ordernu.arr != NULL) {
			strcpy(order_officenumbe, check_officenumbe.arr);
			strcpy(order_pi, check_pi.arr);
			strcpy(order_amoun, check_orderamoun.arr);
			return;
		}
		break;
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor6;
	gotoxy(38, 8);
	printf("존재하지 않는 주문번호 입니다.");
	Sleep(1500);
	manageOut();
}

void no_receiv()
{
	EXEC SQL BEGIN DECLARE SECTION;

	char dynstmt[1000];

	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	sprintf(dynstmt, "delete from warehousing where ordernumber = '%s' ", order_nu);
	EXEC SQL EXECUTE IMMEDIATE : dynstmt;

	EXEC SQL COMMIT WORK;

	gotoxy(38, 8);
	printf("완료되었습니다.");
	Sleep(1500);
	manageOut();
}
void checking_pi()
{
	EXEC SQL BEGIN DECLARE SECTION;
	varchar check_pi[100];

	char dynstmt1[1000];
	EXEC SQL END DECLARE SECTION;

	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	sprintf(dynstmt1, "SELECT pid FROM branchstorage where pid = '%s' and officenumber = '%s' ", order_pi, order_officenumbe);

	EXEC SQL PREPARE S FROM : dynstmt1;

	EXEC SQL DECLARE c_cursor8 CURSOR FOR S;

	EXEC SQL OPEN c_cursor8;

	for (;;)
	{
		EXEC SQL FETCH c_cursor8 INTO : check_pi;
		if (sqlca.sqlcode == 1403) break;
		check_pi.arr[check_pi.len] = '\0';

		if (check_pi.arr != NULL) {
			return;
		}
		break;
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor8;
	insert_pid();

}
void insert_pid()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	sprintf(dynstmt, "insert into branchstorage values ('%s', '%s', '0')", order_pi, order_officenumbe);

	EXEC SQL EXECUTE IMMEDIATE : dynstmt;

	EXEC SQL COMMIT WORK;
}
void update_storag() 
{
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	int i = atoi(now_storagePamoun) - atoi(order_amoun);
	char result[100];
	snprintf(result, 10, "%d", i);


	sprintf(dynstmt, "update storage set pamount = '%s' where pid = '%s'", result, order_pi);

	EXEC SQL EXECUTE IMMEDIATE : dynstmt;

	EXEC SQL COMMIT WORK;
}
void update_branchStorag() {
	EXEC SQL BEGIN DECLARE SECTION;
	char dynstmt[1000];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	int i = atoi(now_branchStoragePamoun) + atoi(order_amoun);
	char result[100];
	snprintf(result, 10, "%d", i);


	sprintf(dynstmt, "update branchstorage set pamount = '%s' where pid = '%s'", result, order_pi);

	EXEC SQL EXECUTE IMMEDIATE : dynstmt;

	EXEC SQL COMMIT WORK;
}
void select_nStoragePamoun() {
	EXEC SQL BEGIN DECLARE SECTION;
	varchar v_pamoun[100];
	char dynstmt[1000];

	EXEC SQL END DECLARE SECTION;


	sprintf(dynstmt, "SELECT pamount FROM storage where pid = '%s'", order_pi);

	EXEC SQL PREPARE S FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor9 CURSOR FOR S;

	/* cursor open */
	EXEC SQL OPEN c_cursor9;

	for (;;)
	{
		if (sqlca.sqlcode == 1403) break;
		EXEC SQL FETCH c_cursor9 INTO : v_pamoun;
		v_pamoun.arr[v_pamoun.len] = '\0';
		int i = atoi(v_pamoun.arr)- atoi(order_amoun);
		if(i<0){
			gotoxy(40, 8);
			printf("해당 물품의 수량이 부족하여 수락할 수 없습니다.");
			Sleep(1500);
			manageOut();
		}
		else{
			strcpy(now_storagePamoun, v_pamoun.arr);
		}

	}
}
void select_nBranchStoragePamoun() {
	EXEC SQL BEGIN DECLARE SECTION;
	varchar v_pamoun[100];
	char dynstmt[1000];

	EXEC SQL END DECLARE SECTION;


	sprintf(dynstmt, "SELECT pamount FROM branchstorage where pid = '%s'", order_pi);

	EXEC SQL PREPARE S FROM : dynstmt;

	/* cursor 선언 */
	EXEC SQL DECLARE c_cursor10 CURSOR FOR S;

	/* cursor open */
	EXEC SQL OPEN c_cursor10;

	for (;;)
	{
		if (sqlca.sqlcode == 1403) break;
		EXEC SQL FETCH c_cursor10 INTO : v_pamoun;
		v_pamoun.arr[v_pamoun.len] = '\0';
			strcpy(now_branchStoragePamoun, v_pamoun.arr);
		
	}
}