// 최초작성자 : 20183199 김기정 [2022.12.04]
// win32 Visual C 2010 이상컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS
//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
void clrscr(void) ;
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void search_tuple();
void input_ordernumber();
void check_ordernumber();
void update_businesstuple();
void update_storagetuple();
void sql_error();

extern void select_HeadMain();
char f_pid[100];
char now_business_pamount[100];
char business_pamount[100];
EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()

void managewarehouse()
{
             _putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용
	DB_connect();
	search_tuple();
	input_ordernumber();
	check_ordernumber();
	update_businesstuple();
	update_storagetuple();
	EXEC SQL COMMIT WORK RELEASE ;
	getch();

}

void search_tuple()
{
    clrscr();
    gotoxy(0, 1);
    print_screen("managewarehousing.txt");

    EXEC SQL BEGIN DECLARE SECTION;
    varchar ordernumber[100];
    varchar type[100];
    varchar officenumber[100];
    varchar pid[100];
    varchar orderamount[100];
    varchar pdate[100];

    char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;


    // Register sql_error() as the error handler. /
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


    // 실행시킬 SQL 문장/
    sprintf(dynstmt, "SELECT ordernumber, type, officenumber, pid, orderamount, pdate FROM warehousing");

    EXEC SQL PREPARE S FROM : dynstmt;

    // cursor 선언 /
    EXEC SQL DECLARE c_cursor CURSOR FOR S;

    // cursor open /
    EXEC SQL OPEN c_cursor;
    gotoxy(19, 11);
    printf(" 주문번호  |유형     |지사번호  |아이디   |주문량    |날짜             ");
    gotoxy(19, 12);
    printf("-------------------------------------------------------------------------");
    int y = 12;


    for (;;)
    {
        EXEC SQL FETCH c_cursor INTO : ordernumber, : type, : officenumber, : pid, : orderamount, : pdate;
		if (sqlca.sqlcode == 1403) break;

        ordernumber.arr[ordernumber.len] = '\0';
        type.arr[type.len] = '\0';
        officenumber.arr[officenumber.len] = '\0';
        pid.arr[pid.len] = '\0';
        orderamount.arr[orderamount.len] = '\0';
        pdate.arr[pdate.len] = '\0';
        gotoxy(19, y);
        printf(" %-10s|%-15s|%-10s|%-10s|%-10s|%-10s", ordernumber.arr, type.arr, officenumber.arr, pid.arr, orderamount.arr, pdate.arr);
        y++;
	}
}
void input_ordernumber()
{
	int input_status;

	/* 사용자 입력 */
	gotoxy(48, 7);
	gets(input_ordernumber); //  입력

	int cursor_position = 10;

	if (strlen(input_ordernumber) <= 0){
		gotoxy(4, 8);
		printf("입력하지 않은 항목이 있습니다 다시 시도해주세요.\n");
		Sleep(1000);
		managewarehouse();
	}
	else {
		while (1) {
			gotoxy(47, cursor_position);
			input_status = _getch();
			if (input_status == 72) { // 방향키↑를 입력받았을 경우
				if (cursor_position == 9) { // 커서가 첫번째 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 10;
				}
				else {
					cursor_position -= 1;
				}
			}
			else if (input_status == 80) {// 방향키↓를 입력받았을 경우
				if (cursor_position == 10) { // 커서가 마지막 행에 있고, 윗방향키를 입력받았을 경우 마지막 행으로 감
					cursor_position = 9;
				}
				else {
					cursor_position += 1;
				}
			}
			else if (input_status == 13) { // 엔터키를 입력받았을 경우
				if (cursor_position == 9) {//첫번째 행
					gotoxy(4, 8);
					printf("요청이 수락되었습니다.");
					Sleep(1500);
					select_HeadMain();
				}
				break;
			}
			else if (input_status == 13) { // 엔터키를 입력받았을 경우
				if (cursor_position == 10) {//두번째 행
					gotoxy(4, 8);
					printf("요청이 거절되었습니다.");
					Sleep(1500);
					select_HeadMain();
				}
				break;
			}
		}
	}

}
void check_ordernumber()
{
	EXEC SQL BEGIN DECLARE SECTION;
	varchar check_ordernumber[100];

	char dynstmt1[1000];
	EXEC SQL END DECLARE SECTION;

	/* Register sql_error() as the error handler. */
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

	sprintf(dynstmt1, "SELECT ordernumber FROM warehousing where ordernumber ='%s' ",input_ordernumber);

	EXEC SQL PREPARE S FROM : dynstmt1;

	EXEC SQL DECLARE c_cursor99 CURSOR FOR S;

	EXEC SQL OPEN c_cursor99;

	for (;;)
	{
		EXEC SQL FETCH c_cursor99 INTO : check_ordernumber;
		if (sqlca.sqlcode == 1403) break;
		check_ordernumber.arr[check_ordernumber.len] = '\0';

		if (check_ordernumber.arr != NULL) {
			return;
		}

		break;
	}
	/* Close the cursor. */
	EXEC SQL CLOSE c_cursor99;

	gotoxy(4, 8);
	printf("존재하지 않는 주문번호입니다.");
	Sleep(1500);
	managewarehouse();
}
void update_businesstuple() //본사 창고에서 수량만큼 제거
{

	EXEC SQL BEGIN DECLARE SECTION;

   	char dynstmt2[1000];

	EXEC SQL END DECLARE SECTION;
	char  pid[100];
	char  pamount[14];
   	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


	int i = atoi(now_business_pamount) - atoi(business_pamount);
	char  sum[100];
	snprintf(sum, 10, "%d", i);
	sprintf(dynstmt2,"update businessstorage set pamount= '%s where pid = %s ", sum, f_pid);
	printf("stmt:%s\n", dynstmt2);

	EXEC SQL EXECUTE IMMEDIATE : dynstmt2;

	EXEC SQL COMMIT WORK ;
	gotoxy(4, 8);
	printf("요청이 수락 되었습니다.\n");
	Sleep(1000);
	select_HeadMain();
}
void update_storagetuple()
{

EXEC SQL BEGIN DECLARE SECTION;

   char dynstmt[1000];

EXEC SQL END DECLARE SECTION;

   char  pid[100];
   char  officenumber[100];
   char  pamount[14];
   char  sum[100];
   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
  
   sprintf(dynstmt,"update branchstorage set pamount= '%s where pid = %s ", sum, f_pid);
   printf("stmt:%s\n", dynstmt);
   
   EXEC SQL EXECUTE IMMEDIATE :dynstmt ;

EXEC SQL OPEN c_cursor99;

   printf("요청이 수락 되었습니다.\n");
   EXEC SQL COMMIT WORK ; 

/* Close the cursor. */
	EXEC SQL CLOSE c_cursor99;

EXEC SQL COMMIT ;
}